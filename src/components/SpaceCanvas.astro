---
---

<div class="canvas">
    <nav class="nav-links">
        <a href="/">RETURN TO LAB</a>
    </nav>
    <canvas id="space-scene"></canvas>
</div>

<script>
    import * as THREE from 'three';

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#space-scene') as HTMLCanvasElement,
        antialias: true,
        alpha: true
    });

    // Setup
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    camera.position.z = 5;

    // Create cubes with proper typing
    const cubes: THREE.Object3D[] = [];
    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const edges = new THREE.EdgesGeometry(geometry);

    for (let i = 0; i < 50; i++) {
        const material = new THREE.LineBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.5
        });
        const cube = new THREE.LineSegments(edges, material);
        
        // Random position
        cube.position.x = (Math.random() - 0.5) * 10;
        cube.position.y = (Math.random() - 0.5) * 10;
        cube.position.z = (Math.random() - 0.5) * 10;
        
        // Random rotation
        cube.rotation.x = Math.random() * Math.PI;
        cube.rotation.y = Math.random() * Math.PI;
        
        cubes.push(cube);
        scene.add(cube);
    }

    // Mouse movement effect
    let mouseX = 0;
    let mouseY = 0;
    let targetX = 0;
    let targetY = 0;

    document.addEventListener('mousemove', (event) => {
        mouseX = (event.clientX - window.innerWidth / 2) * 0.001;
        mouseY = (event.clientY - window.innerHeight / 2) * 0.001;
    });

    // Handle resize
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // Animation loop
    function animate() {
        requestAnimationFrame(animate);

        // Smooth camera movement
        targetX += (mouseX - targetX) * 0.05;
        targetY += (mouseY - targetY) * 0.05;
        camera.rotation.y = targetX;
        camera.rotation.x = targetY;

        // Animate cubes
        cubes.forEach((cube, i) => {
            cube.rotation.x += 0.001 + (i * 0.0001);
            cube.rotation.y += 0.002 + (i * 0.0001);
            
            // Pulse effect
            const scale = 1 + Math.sin(Date.now() * 0.001 + i) * 0.1;
            cube.scale.set(scale, scale, scale);
            
            // Opacity pulse
            if (cube instanceof THREE.LineSegments) {
                const material = cube.material as THREE.LineBasicMaterial;
                material.opacity = 0.3 + Math.sin(Date.now() * 0.002 + i) * 0.2;
            }
        });

        renderer.render(scene, camera);
    }

    animate();
</script>

<style>
    .canvas {
        width: 100%;
        height: 100vh;
        background: #000;
        overflow: hidden;
        position: relative;
    }

    canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .nav-links {
        position: fixed;
        top: 2rem;
        left: 2rem;
        z-index: 100;
    }

    .nav-links a {
        color: #fff;
        text-decoration: none;
        font-size: 0.8rem;
        letter-spacing: 0.2em;
        opacity: 0.7;
        transition: opacity 0.3s;
    }

    .nav-links a:hover {
        opacity: 1;
    }
</style>
