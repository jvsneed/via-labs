---
---

<div class="canvas">
    <nav class="nav-links">
        <a href="/">RETURN TO LAB</a>
    </nav>
    <div class="controls">
        <div class="control-group">
            <label>Bloom Strength</label>
            <input type="range" id="bloom" min="0" max="5" step="0.1" value="1.5">
        </div>
        <div class="control-group">
            <label>Rotation Speed</label>
            <input type="range" id="rotation" min="0" max="0.02" step="0.001" value="0.005">
        </div>
        <div class="control-group">
            <label>Float Height</label>
            <input type="range" id="float" min="0" max="1" step="0.1" value="0.3">
        </div>
        <div class="control-group">
            <label>Particle Speed</label>
            <input type="range" id="particles" min="0" max="0.05" step="0.001" value="0.02">
        </div>
    </div>
    <div class="floating-texts"></div>
    <canvas id="space-scene"></canvas>
</div>

<script>
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
    import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
    import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
    import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';

    const canvas = document.querySelector('#space-scene');
    if (!canvas) {
        throw new Error('Could not find canvas element');
    }

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas as HTMLCanvasElement,
        antialias: true
    });

    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000);
    renderer.shadowMap.enabled = true;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1.5; // Increase overall brightness

    // Add post-processing
    const composer = new EffectComposer(renderer);
    const renderPass = new RenderPass(scene, camera);
    const bloomPass = new UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        1.5,  // bloom strength
        0.4,  // radius
        0.85  // threshold
    );
    composer.addPass(renderPass);
    composer.addPass(bloomPass);

    // Add lights
    const ambientLight = new THREE.AmbientLight(0x404040, 3); // Increased from 2 to 3
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0xffffff, 3); // Increased from 2 to 3
    pointLight.position.set(5, 5, 5);
    scene.add(pointLight);

    // Add second point light for better illumination
    const pointLight2 = new THREE.PointLight(0xffffff, 2); // Increased from 1.5 to 2
    pointLight2.position.set(-5, -5, 5);
    scene.add(pointLight2);

    // Add a third light for more even illumination
    const pointLight3 = new THREE.PointLight(0xffffff, 1.5);
    pointLight3.position.set(0, 5, -5);
    scene.add(pointLight3);

    // Add stars
    const starGeometry = new THREE.BufferGeometry();
    const starMaterial = new THREE.PointsMaterial({
        color: 0xffffff,
        size: 0.1
    });

    const starsVertices = [];
    for (let i = 0; i < 1000; i++) {
        const x = (Math.random() - 0.5) * 2000;
        const y = (Math.random() - 0.5) * 2000;
        const z = (Math.random() - 0.5) * 2000;
        starsVertices.push(x, y, z);
    }

    starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starsVertices, 3));
    const stars = new THREE.Points(starGeometry, starMaterial);
    scene.add(stars);

    // Add floating particles
    const particleCount = 200;
    const particleGeometry = new THREE.BufferGeometry();
    const particlePositions = new Float32Array(particleCount * 3);
    const particleSpeeds = new Float32Array(particleCount);

    for (let i = 0; i < particleCount; i++) {
        particlePositions[i * 3] = (Math.random() - 0.5) * 10;
        particlePositions[i * 3 + 1] = (Math.random() - 0.5) * 10;
        particlePositions[i * 3 + 2] = (Math.random() - 0.5) * 10;
        particleSpeeds[i] = Math.random() * 0.02;
    }

    particleGeometry.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3));
    const particleMaterial = new THREE.PointsMaterial({
        color: 0x0099ff,
        size: 0.05,
        transparent: true,
        opacity: 0.8,
        blending: THREE.AdditiveBlending
    });

    const particles = new THREE.Points(particleGeometry, particleMaterial);
    scene.add(particles);

    // Camera position
    camera.position.z = 3; // Moved camera closer

    // Add controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // Load model
    const loader = new GLTFLoader();
    let astronaut: THREE.Group | undefined;
    
    loader.load(
        '/models/astronaut.glb', // You'll need to add this model to your public folder
        (gltf: GLTF) => {
            astronaut = gltf.scene;
            astronaut.scale.set(0.8, 0.8, 0.8); // Increased scale
            astronaut.position.set(0, 0, 0); // Centered position
            scene.add(astronaut);
        },
        undefined,
        (error) => {
            console.error('Error loading model:', error);
        }
    );

    // Mouse interaction
    const mouse = new THREE.Vector2();
    const raycaster = new THREE.Raycaster();
    let isHovering = false;

    window.addEventListener('mousemove', (event) => {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);
        if (astronaut) {
            const intersects = raycaster.intersectObject(astronaut, true);
            isHovering = intersects.length > 0;
            
            if (isHovering) {
                bloomPass.strength = 3.0;
            } else {
                bloomPass.strength = 1.5;
            }
        }
    });

    // Control variables
    let settings = {
        bloomStrength: 1.5,
        rotationSpeed: 0.005,
        floatHeight: 0.3,
        particleMaxSpeed: 0.02
    };

    // Setup control listeners
    document.getElementById('bloom')?.addEventListener('input', (e) => {
        settings.bloomStrength = parseFloat((e.target as HTMLInputElement).value);
        bloomPass.strength = settings.bloomStrength;
    });

    document.getElementById('rotation')?.addEventListener('input', (e) => {
        settings.rotationSpeed = parseFloat((e.target as HTMLInputElement).value);
    });

    document.getElementById('float')?.addEventListener('input', (e) => {
        settings.floatHeight = parseFloat((e.target as HTMLInputElement).value);
    });

    document.getElementById('particles')?.addEventListener('input', (e) => {
        settings.particleMaxSpeed = parseFloat((e.target as HTMLInputElement).value);
        // Update particle speeds
        for (let i = 0; i < particleCount; i++) {
            particleSpeeds[i] = Math.random() * settings.particleMaxSpeed;
        }
    });

    // Add floating text system
    const texts = [
        "the emptiness fills everything",
        "floating through infinite space",
        "silence speaks volumes",
        "drifting between stars",
        "cosmic dance of solitude",
        "void becomes everything",
        "entropy whispers"
    ];

    const floatingTextsContainer = document.querySelector('.floating-texts');
    
    function createFloatingText() {
        if (!floatingTextsContainer) return;
        
        const text = document.createElement('div');
        text.className = 'floating-text';
        text.textContent = texts[Math.floor(Math.random() * texts.length)];
        
        // Random position around the center
        const angle = Math.random() * Math.PI * 2;
        const radius = 150 + Math.random() * 100;
        const x = Math.cos(angle) * radius;
        const y = Math.sin(angle) * radius;
        
        text.style.setProperty('--x', `${x}px`);
        text.style.setProperty('--y', `${y}px`);
        
        floatingTextsContainer.appendChild(text);
        
        // Remove after animation
        setTimeout(() => {
            text.remove();
        }, 8000);
    }

    // Create new text periodically
    setInterval(createFloatingText, 4000);
    createFloatingText(); // Create first one immediately

    // Animation
    function animate() {
        requestAnimationFrame(animate);
        
        // Rotate scene slightly
        scene.rotation.y += 0.001;
        
        if (astronaut) {
            astronaut.rotation.y += settings.rotationSpeed;
            astronaut.position.y = Math.sin(Date.now() * 0.001) * settings.floatHeight;
            
            // Color pulse effect
            const time = Date.now() * 0.001;
            const color = new THREE.Color();
            color.setHSL(0.6 + Math.sin(time) * 0.1, 0.8, 0.5);
            pointLight.color = color;
        }

        // Animate particles
        const positions = particles.geometry.attributes.position.array;
        for (let i = 0; i < particleCount; i++) {
            positions[i * 3 + 1] += particleSpeeds[i];
            if (positions[i * 3 + 1] > 5) {
                positions[i * 3 + 1] = -5;
            }
        }
        particles.geometry.attributes.position.needsUpdate = true;

        controls.update();
        composer.render();
    }

    animate();

    // Handle window resize
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        composer.setSize(window.innerWidth, window.innerHeight);
    });
</script>

<style>
    .canvas {
        width: 100%;
        height: 100vh;
        background: #000;
        overflow: hidden;
    }

    canvas {
        position: fixed;
        top: 0;
        left: 0;
    }

    .nav-links {
        position: fixed;
        top: 2rem;
        left: 2rem;
        z-index: 100;
    }

    .nav-links a {
        color: #fff;
        text-decoration: none;
        font-size: 0.8rem;
        letter-spacing: 0.2em;
        opacity: 0.7;
        transition: opacity 0.3s;
    }

    .nav-links a:hover {
        opacity: 1;
    }

    .controls {
        position: fixed;
        top: 2rem;
        right: 2rem;
        background: rgba(0, 0, 0, 0.7);
        padding: 1rem;
        border-radius: 8px;
        backdrop-filter: blur(10px);
        z-index: 100;
        min-width: 200px;
    }

    .control-group {
        margin: 1rem 0;
    }

    .control-group label {
        display: block;
        color: #fff;
        font-size: 0.8rem;
        margin-bottom: 0.5rem;
        letter-spacing: 0.1em;
    }

    .control-group input {
        width: 100%;
        background: rgba(255, 255, 255, 0.1);
        -webkit-appearance: none;
        height: 2px;
        border-radius: 1px;
        outline: none;
    }

    .control-group input::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 12px;
        height: 12px;
        background: #fff;
        border-radius: 50%;
        cursor: pointer;
    }

    @media (max-width: 768px) {
        .controls {
            top: auto;
            bottom: 2rem;
            right: 2rem;
            left: 2rem;
        }
    }

    .floating-texts {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
        z-index: 50;
    }

    .floating-text {
        position: absolute;
        font-family: serif;
        font-size: clamp(1rem, 2vw, 1.5rem);
        color: rgba(255, 255, 255, 0.9);
        white-space: nowrap;
        transform: translate(var(--x), var(--y));
        animation: floatAndFade 8s ease-out forwards;
        text-shadow: 
            0 0 10px rgba(0, 153, 255, 0.5),
            0 0 20px rgba(0, 153, 255, 0.3),
            0 0 30px rgba(0, 153, 255, 0.2),
            2px 2px 2px rgba(0, 0, 0, 0.5);
        font-weight: 300;
        letter-spacing: 0.05em;
    }

    @keyframes floatAndFade {
        0% {
            opacity: 0;
            transform: translate(var(--x), var(--y)) scale(0.8);
            text-shadow: 
                0 0 10px rgba(0, 153, 255, 0.5),
                0 0 20px rgba(0, 153, 255, 0.3),
                0 0 30px rgba(0, 153, 255, 0.2),
                2px 2px 2px rgba(0, 0, 0, 0.5);
        }
        20% {
            opacity: 0.9;
        }
        80% {
            opacity: 0.7;
        }
        100% {
            opacity: 0;
            transform: translate(
                calc(var(--x) * 1.2), 
                calc(var(--y) * 1.2)
            ) scale(1.1);
            text-shadow: 
                0 0 15px rgba(0, 153, 255, 0.3),
                0 0 25px rgba(0, 153, 255, 0.2),
                0 0 35px rgba(0, 153, 255, 0.1),
                2px 2px 2px rgba(0, 0, 0, 0.5);
        }
    }
</style>
